{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class KpiService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:3000/api';\n  }\n  getKPIs() {\n    return this.http.get(`${this.API_URL}/kpis`);\n  }\n  getTeamCounts() {\n    return this.http.get(`${this.API_URL}/team-counts`);\n  }\n  getKPIsByNWB(nwb) {\n    return this.getKPIs().pipe(map(kpis => kpis.filter(kpi => kpi.nwb === nwb)));\n  }\n  getKPIsByTeam(team) {\n    return this.getKPIs().pipe(map(kpis => kpis.filter(kpi => kpi.team === team)));\n  }\n  static {\n    this.ɵfac = function KpiService_Factory(t) {\n      return new (t || KpiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: KpiService,\n      factory: KpiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","KpiService","constructor","http","API_URL","getKPIs","get","getTeamCounts","getKPIsByNWB","nwb","pipe","kpis","filter","kpi","getKPIsByTeam","team","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\workspace\\eng-dashboard\\frontend\\src\\app\\services\\kpi.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\nimport { KPI, TeamCount } from '../models/kpi.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class KpiService {\n  private readonly API_URL = 'http://localhost:3000/api';\n\n  constructor(private http: HttpClient) {}\n\n  getKPIs(): Observable<KPI[]> {\n    return this.http.get<KPI[]>(`${this.API_URL}/kpis`);\n  }\n\n  getTeamCounts(): Observable<TeamCount[]> {\n    return this.http.get<TeamCount[]>(`${this.API_URL}/team-counts`);\n  }\n\n  getKPIsByNWB(nwb: string): Observable<KPI[]> {\n    return this.getKPIs().pipe(\n      map(kpis => kpis.filter(kpi => kpi.nwb === nwb))\n    );\n  }\n\n  getKPIsByTeam(team: string): Observable<KPI[]> {\n    return this.getKPIs().pipe(\n      map(kpis => kpis.filter(kpi => kpi.team === team))\n    );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAMtC,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,2BAA2B;EAEf;EAEvCC,OAAOA,CAAA;IACL,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,OAAO,OAAO,CAAC;EACrD;EAEAG,aAAaA,CAAA;IACX,OAAO,IAAI,CAACJ,IAAI,CAACG,GAAG,CAAc,GAAG,IAAI,CAACF,OAAO,cAAc,CAAC;EAClE;EAEAI,YAAYA,CAACC,GAAW;IACtB,OAAO,IAAI,CAACJ,OAAO,EAAE,CAACK,IAAI,CACxBV,GAAG,CAACW,IAAI,IAAIA,IAAI,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACJ,GAAG,KAAKA,GAAG,CAAC,CAAC,CACjD;EACH;EAEAK,aAAaA,CAACC,IAAY;IACxB,OAAO,IAAI,CAACV,OAAO,EAAE,CAACK,IAAI,CACxBV,GAAG,CAACW,IAAI,IAAIA,IAAI,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACE,IAAI,KAAKA,IAAI,CAAC,CAAC,CACnD;EACH;;;uBAvBWd,UAAU,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAVlB,UAAU;MAAAmB,OAAA,EAAVnB,UAAU,CAAAoB,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}